{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","appBar","position","icon","marginRight","spacing","unit","heroUnit","backgroundColor","palette","background","paper","heroContent","maxWidth","margin","padding","concat","heroButtons","marginTop","layout","Object","defineProperty","width","marginLeft","breakpoints","up","cardGrid","card","height","display","flexDirection","cardMedia","paddingTop","cardContent","flexGrow","footer","props","classes","react_default","a","createElement","Fragment","CssBaseline_default","AppBar_default","className","Toolbar_default","Typography_default","variant","color","noWrap","align","paragraph","classNames","Grid_default","container","item","sm","md","lg","Card_default","CardMedia_default","style","image","title","CardContent_default","gutterBottom","component","CardActions_default","Button_default","size","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b35d3e7e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  appBar: {\n    position: 'relative',\n  },\n  icon: {\n    marginRight: theme.spacing.unit * 2,\n  },\n  heroUnit: {\n    backgroundColor: theme.palette.background.paper,\n  },\n  heroContent: {\n    maxWidth: 600,\n    margin: '0 auto',\n    padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`,\n  },\n  heroButtons: {\n    marginTop: theme.spacing.unit * 4,\n  },\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(1100 + theme.spacing.unit * 3 * 2)]: {\n      width: 1100,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n  cardGrid: {\n    padding: `${theme.spacing.unit * 8}px 0`,\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing.unit * 6,\n  },\n});\n\nconst cards = [1, 2, 3];\n\nfunction Album(props) {\n  const { classes } = props;\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"static\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            Don Teng\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroUnit}>\n          <div className={classes.heroContent}>\n            <Typography variant=\"h6\" align=\"center\" color=\"textSecondary\" paragraph>\n              Python/R/C++ programmer, aspiring front-end developer.\n            </Typography>\n            <div className={classes.heroButtons}>\n            {/*\n              <Grid container spacing={16} justify=\"center\">\n                <Grid item>\n                  <Button variant=\"contained\" color=\"primary\">\n                    Main call to action\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button variant=\"outlined\" color=\"primary\">\n                    Secondary action\n                  </Button>\n                </Grid>\n              </Grid>\n              */}\n            </div>\n          </div>\n        </div>\n        <div className={classNames(classes.layout, classes.cardGrid)}>\n          {/* End hero unit */}\n\n\n          <Grid container spacing={40}>\n            <Grid item sm={6} md={4} lg={3}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    style={{height: 0, paddingTop: '56.25%'}}\n                    // dummy image first\n                    image=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22288%22%20height%3D%22225%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20288%20225%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_164edaf95ee%20text%20%7B%20fill%3A%23eceeef%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A14pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_164edaf95ee%22%3E%3Crect%20width%3D%22288%22%20height%3D%22225%22%20fill%3D%22%2355595c%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2296.32500076293945%22%20y%3D%22118.8%22%3EThumbnail%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" // eslint-disable-line max-len\n                    //image={\"https://raw.githubusercontent.com/Don86/Don86.github.io/master/assets/aurora-kinase-inhibitor-min.png\"}\n                    title=\"Image title\"\n                    height={200}\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Automated Analysis of Microscopy Images\n                    </Typography>\n                    <Typography>\n                      Classification of breast cancer microscopy images using dictionary learning. MSC Thesis, 2017.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      Details\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                      Github\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n              <Grid item sm={6} md={4} lg={3}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    style={{height: 0, paddingTop: '56.25%'}}\n                    // dummy image first\n                    image=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22288%22%20height%3D%22225%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20288%20225%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_164edaf95ee%20text%20%7B%20fill%3A%23eceeef%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A14pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_164edaf95ee%22%3E%3Crect%20width%3D%22288%22%20height%3D%22225%22%20fill%3D%22%2355595c%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2296.32500076293945%22%20y%3D%22118.8%22%3EThumbnail%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" // eslint-disable-line max-len\n                    //image={\"https://raw.githubusercontent.com/Don86/Don86.github.io/master/assets/aurora-kinase-inhibitor-min.png\"}\n                    title=\"Image title\"\n                    height={200}\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      Heading2\n                    </Typography>\n                    <Typography>\n                      This is a media card. You can use this section to describe the content.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      Details\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                      Github\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n              <Grid item sm={6} md={4} lg={3}>\n                <Card className={classes.card}>\n                  <CardMedia\n                    className={classes.cardMedia}\n                    style={{height: 0, paddingTop: '56.25%'}}\n                    // dummy image first\n                    image=\"data:image/svg+xml;charset=UTF-8,%3Csvg%20width%3D%22288%22%20height%3D%22225%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20288%20225%22%20preserveAspectRatio%3D%22none%22%3E%3Cdefs%3E%3Cstyle%20type%3D%22text%2Fcss%22%3E%23holder_164edaf95ee%20text%20%7B%20fill%3A%23eceeef%3Bfont-weight%3Abold%3Bfont-family%3AArial%2C%20Helvetica%2C%20Open%20Sans%2C%20sans-serif%2C%20monospace%3Bfont-size%3A14pt%20%7D%20%3C%2Fstyle%3E%3C%2Fdefs%3E%3Cg%20id%3D%22holder_164edaf95ee%22%3E%3Crect%20width%3D%22288%22%20height%3D%22225%22%20fill%3D%22%2355595c%22%3E%3C%2Frect%3E%3Cg%3E%3Ctext%20x%3D%2296.32500076293945%22%20y%3D%22118.8%22%3EThumbnail%3C%2Ftext%3E%3C%2Fg%3E%3C%2Fg%3E%3C%2Fsvg%3E\" // eslint-disable-line max-len\n                    //image={\"https://raw.githubusercontent.com/Don86/Don86.github.io/master/assets/aurora-kinase-inhibitor-min.png\"}\n                    title=\"Image title\"\n                    height={200}\n                  />\n                  <CardContent className={classes.cardContent}>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                      My Heading\n                    </Typography>\n                    <Typography>\n                      This is a media card. You can use this section to describe the content.\n                    </Typography>\n                  </CardContent>\n                  <CardActions>\n                    <Button size=\"small\" color=\"primary\">\n                      Details\n                    </Button>\n                    <Button size=\"small\" color=\"primary\">\n                      Github\n                    </Button>\n                  </CardActions>\n                </Card>\n              </Grid>\n          </Grid>\n        </div>\n      </main>\n      {/* Footer */}\n      <footer className={classes.footer}>\n        <Typography variant=\"h6\" align=\"center\" gutterBottom>\n          Footer\n        </Typography>\n        <Typography variant=\"subtitle1\" align=\"center\" color=\"textSecondary\" component=\"p\">\n          Something here to give the footer a purpose!\n        </Typography>\n      </footer>\n      {/* End footer */}\n    </React.Fragment>\n  );\n}\n\nAlbum.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Album);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}